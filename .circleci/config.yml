# Elixir CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.1/language-elixir/ for more details
version: 2.1
jobs:
  test:
    docker:
      # specify the version here
      - image: circleci/elixir:1.8
      - image: postgres:11-alpine
        environment:
          POSTGRES_PASSWORD: postgres

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0

      # specify any bash command here prefixed with `run: `
      - run: mix do local.hex --force, local.rebar --force, deps.get, compile
      - run: mix deps.get
      - run: mix test

  push:
    docker:
      - image: circleci/elixir:1.8
    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: build image --target PROD
          command: docker build . -t sashman/birin_api
      - run:
          name: tag latest image
          command: docker tag sashman/birin_api sashman/birin_api:latest
      - run:
          name: tag verison image
          command: if [[ ! -z $CIRCLE_TAG ]]; then docker tag sashman/birin_api sashman/birin_api:$CIRCLE_TAG; else exit 0; fi
      - run:
          name: docker login
          command: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - run:
          name: push latest image
          command: docker push sashman/birin_api:latest
      - run:
          name: push versioned image
          command: if [[ ! -z $CIRCLE_TAG ]]; then docker push sashman/birin_api:$CIRCLE_TAG; else exit 0; fi

  deploy:
    docker:
      - image: kroniak/ssh-client
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install  curl
          command: apk --no-cache add curl
      - run:
          name: set up ssh key
          command: |
            mkdir -p ~/.ssh
            chmod 700 ~/.ssh
            echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
            echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa

workflows:
  version: 2
  workflow:
    jobs:
      - test:
          filters:
            branches:
              only:
                - master
            tags:
              only: /v?[0-9]{1,}.[0-9]{1,}.[0-9]{1,}/
      - push:
          requires:
            - test
          filters:
            branches:
              only:
                - master
            tags:
              only: /v?[0-9]{1,}.[0-9]{1,}.[0-9]{1,}/
      - deploy:
          requires:
            - push
          filters:
            branches:
              only:
                - master
            tags:
              only: /v?[0-9]{1,}.[0-9]{1,}.[0-9]{1,}/
